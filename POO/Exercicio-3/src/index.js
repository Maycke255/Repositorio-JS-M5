/* Crie um conjunto de classes em javascript para auxiliar na intera√ß√£o com o DOM.

Voc√™ dever√° criar, no m√≠nimo, 4 classes diferentes:
Uma classe para um elemento gen√©rico do DOM (dica: utilize o nome¬†Component, pois o nome Element poder√° gerar conflitos 
com a implementa√ß√£o do navegador).Essa classe dever√° possuir um atributo privado para armazenar a refer√™ncia ao elemento 
do DOM e um m√©todo de acesso para ler o valor desse atributo.Ela tamb√©m deve possuir um m√©todo¬†build¬†para criar o
elemento que deve ser chamado uma vez no construtor, mas tamb√©m deve ser poss√≠vel cham√°-lo novamente atrav√©s da 
inst√¢ncia.Ela tamb√©m deve possuir um m√©todo¬†render¬†para adicionar o elemento na p√°gina que poder√° ser chamado pela 
inst√¢ncia a qualquer momento.

Essa classe dever√° possuir um atributo privado para armazenar a refer√™ncia ao elemento do DOM e um m√©todo de acesso 
para ler o valor desse atributo.

Ela tamb√©m deve possuir um m√©todo¬†build¬†para criar o elemento que deve ser chamado uma vez no construtor, mas tamb√©m 
deve ser poss√≠vel cham√°-lo novamente atrav√©s da inst√¢ncia.

Ela tamb√©m deve possuir um m√©todo¬†render¬†para adicionar o elemento na p√°gina que poder√° ser chamado pela inst√¢ncia a 
qualquer momento.

Uma classe espec√≠fica para elementos¬†input, que deve ser uma subclasse da classe Component.

Uma classe espec√≠fica para elementos¬†label, que deve ser uma subclasse da classe Component e no seu construtor deve 
ser poss√≠vel indicar como primeiro par√¢metro qual ser√° o seu conte√∫do em texto.

Uma classe espec√≠fica para elementos¬†form, que deve ser uma subclasse da classe Component e possuir um m√©todo para 
adicionar elementos como filhos (atrav√©s das inst√¢ncias das classes Component e suas subclasses). */

class Component {

    #type;

    constructor(type, id, classe){
        this.#type = type;
        this.id = id;
        this.classe = classe;
    }
    
    build(){
        const input = document.createElement('input');

        input.type = this.#type;
        input.id = this.id;
        input.className = this.classe;
        return input;
    }

    get type(){
        return this.#type;
    }

    render(container){
        const main = document.getElementById(container);

        const input = this.build();
        main.appendChild(input);
    }

    displayComponent(){
        if (this.#type) {
            return `${this.#type} e ${this.id}`
        }
    }
}

class Input extends Component {
    constructor(type, id, classe, value){
        super(type, id, classe)
        this.value = value;
    }

    build(){
        const input = document.createElement('input')

        input.type = this.type;
        input.id = this.id;
        input.className = this.classe;
        input.value = this.value;
        return input;
    }

    render(container){
        const render = super.render(container);
        return render;
    }
}

class Label extends Component {
    constructor(id, classe, text, forLabel){
        super(null, id, classe);
        this.text = text;
        this.for = forLabel;
    }

    build(){
        const label = document.createElement('label');

        label.innerText = this.text;
        label.htmlFor = this.for;
        label.id = this.id;
        label.className = this.classe;
        return label;
    }
    
    render(container){
        const render = super.render(container);
        return render;
    }
}

class Form extends Component{
    constructor(id, classe){
        super(null, id, classe);
        this.children = [] // <- Componentes do form, como label inputs, etc
    }

    build(){
        const form = document.createElement('form');

        form.id = this.id;
        form.className = this.classe;

        this.children.forEach((child) => {
            form.appendChild(child.build()); //Chamando o metodo build para criar o elemento html
        });

        return form;
    }

    addChild(component){
        this.children.push(component);
    }

    /* O que a fun√ß√£o addChi√ßd e build fazem nesse caso?
    addChild(child) üëâ apenas adiciona a inst√¢ncia (objeto) no array this.children.
    Ou seja, guarda o objeto JS (Input, Label, Form, etc).
    this.children.forEach(child => { form.appendChild(child.build()) }) üëâ percorre cada objeto armazenado e chama o .build() de cada um, que
    devolve o elemento HTML real, e ent√£o adiciona no <form>. */
    render(container){
        const main = document.getElementById(container);

        const form = this.build();
        main.appendChild(form);
        return form;
    }
}

const formTest = new Form('form1', 'form-class');

const label1 = new Label('nameLabel', 'name-label', 'Nome: ', 'name-input');
// label1.render('main');
console.log(label1);

const component1 = new Component('text', 'name', 'name-input');
// componet1.render('main');
console.log(component1.displayComponent());
console.log(component1)

const inputOk = new Input('submit', 'submitBtn','submit-btn', 'ENVIAR');
const inputCancel = new Input('button', 'cancelBtn', 'btn-cancel', 'CANCELAR');
// inputBtn.render('main');
console.log(inputOk);
console.log(inputCancel);


formTest.addChild(label1);
formTest.addChild(component1);
formTest.addChild(inputOk);
formTest.addChild(inputCancel);

formTest.render('main');